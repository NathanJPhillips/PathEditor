<Window x:Class="NobleTech.Products.PathEditor.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:converter="clr-namespace:NobleTech.Products.PathEditor.Converters"
        xmlns:behaviors="clr-namespace:NobleTech.Products.PathEditor.Behaviors"
        xmlns:viewmodels="clr-namespace:NobleTech.Products.PathEditor.ViewModels"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance viewmodels:MainWindowViewModel}"
        Title="{Binding Editor.FileName, StringFormat='Path Editor - {0}'}" Height="450" Width="800">
    <Window.Resources>
        <Style TargetType="AccessText">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="DarkGray" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="xctk:ColorPicker">
            <Setter Property="Width" Value="50" />
        </Style>
        <converter:ColorToSolidColorBackgroundConverter x:Key="ColorToSolidColorBackgroundConverter" Invert="True" />
        <converter:EqualValuesConverter x:Key="EqualValuesConverter" />
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.New" Executed="OnNewExecuted" CanExecute="OnNewCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Open" Executed="OnOpenExecuted" CanExecute="OnOpenCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Save" Executed="OnSaveExecuted" CanExecute="OnSaveCanExecute"/>
        <CommandBinding Command="ApplicationCommands.SaveAs" Executed="OnSaveAsExecuted" CanExecute="OnSaveAsCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Print" Executed="OnPrintExecuted" CanExecute="OnPrintCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Close" Executed="OnCloseExecuted" CanExecute="OnCloseCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Undo" Executed="OnUndoExecuted" CanExecute="OnUndoCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Redo" Executed="OnRedoExecuted" CanExecute="OnRedoCanExecute"/>
        <CommandBinding Command="ApplicationCommands.SelectAll" Executed="OnSelectAllExecuted" CanExecute="OnSelectAllCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Cut" Executed="OnCutExecuted" CanExecute="OnCutCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Copy" Executed="OnCopyExecuted" CanExecute="OnCopyCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Paste" Executed="OnPasteExecuted" CanExecute="OnPasteCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Delete" Executed="OnDeleteExecuted" CanExecute="OnDeleteCanExecute"/>
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="Esc" Command="{Binding Editor.DeselectAllCommand}" />
        <KeyBinding Key="I" Modifiers="Control" Command="{Binding Editor.InvertSelectionCommand}" />
        <KeyBinding Key="D" Modifiers="Control" Command="{Binding Editor.DuplicateCommand}" />
        <KeyBinding Key="F11" Command="{Binding BabyPaintViewCommand}" />
    </Window.InputBindings>
    <DockPanel>
        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Menu>
                    <MenuItem Header="_File">
                        <MenuItem Header="_New" Command="ApplicationCommands.New" InputGestureText="Ctrl+N" />
                        <MenuItem Header="_Open" Command="ApplicationCommands.Open" InputGestureText="Ctrl+O" />
                        <MenuItem Header="_Save" Command="ApplicationCommands.Save" InputGestureText="Ctrl+S" />
                        <MenuItem Header="Save _As" Command="ApplicationCommands.SaveAs" />
                        <MenuItem Header="_Print" Command="ApplicationCommands.Print" InputGestureText="Ctrl+P" />
                        <Separator />
                        <MenuItem Header="_Close" Command="ApplicationCommands.Close" InputGestureText="Alt+F4" />
                    </MenuItem>
                    <MenuItem Header="_Edit">
                        <MenuItem Command="ApplicationCommands.Undo" InputGestureText="Ctrl+Z">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <AccessText>_Undo</AccessText>
                                    <TextBlock Text="{Binding Editor.UndoStack.NextUndoName}" FontStyle="Italic" Margin="5,0,0,0" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Command="ApplicationCommands.Redo" InputGestureText="Ctrl+Y">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <AccessText>_Redo</AccessText>
                                    <TextBlock Text="{Binding Editor.UndoStack.NextRedoName}" FontStyle="Italic" Margin="5,0,0,0" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="Select _All" Command="ApplicationCommands.SelectAll" InputGestureText="Ctrl+A" />
                        <MenuItem Header="C_lear Selection" Command="{Binding Editor.DeselectAllCommand}" InputGestureText="Esc" />
                        <MenuItem Header="_Invert Selection" Command="{Binding Editor.InvertSelectionCommand}" InputGestureText="Ctrl+I" />
                        <Separator />
                        <MenuItem Header="C_ut" Command="ApplicationCommands.Cut" InputGestureText="Ctrl+X" />
                        <MenuItem Header="_Copy" Command="ApplicationCommands.Copy" InputGestureText="Ctrl+C" />
                        <MenuItem Header="_Paste" Command="ApplicationCommands.Paste" InputGestureText="Ctrl+V" />
                        <Separator />
                        <MenuItem Header="_Delete" Command="ApplicationCommands.Delete" InputGestureText="Del" />
                        <MenuItem Header="D_uplicate" Command="{Binding Editor.DuplicateCommand}" InputGestureText="Ctrl+D" />
                    </MenuItem>
                    <MenuItem Header="_Style" behaviors:DynamicMenuItems.Source="{Binding Editor.Styles}" behaviors:DynamicMenuItems.AddSeparatorBefore="True">
                        <behaviors:DynamicMenuItems.ContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Header" Value="{Binding Name}" />
                                <Setter Property="Command" Value="{Binding DataContext.Editor.SetStyleImmediateCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
                                <Setter Property="CommandParameter" Value="{Binding}" />
                                <Setter Property="Margin" Value="-5,1,0,0" />
                            </Style>
                        </behaviors:DynamicMenuItems.ContainerStyle>
                        <MenuItem Header="_Set Current..." Command="{Binding Editor.SetStyleCommand}" />
                        <MenuItem Header="_Apply to Selection..." Command="{Binding Editor.ApplyStyleCommand}" />
                        <MenuItem Header="_Create from Current..." Command="{Binding Editor.CreateStyleCommand}" />
                    </MenuItem>
                    <MenuItem Header="_Image">
                        <MenuItem Header="_Crop to Paths" Command="{Binding Editor.CropToPathsCommand}" />
                        <MenuItem Header="_Resize Canvas..." Command="{Binding Editor.ResizeCanvasCommand}" />
                        <MenuItem Header="_Fit to Canvas" Command="{Binding Editor.FitToCanvasCommand}" />
                        <MenuItem Header="Cent_er on Canvas" Command="{Binding Editor.CenterOnCanvasCommand}" />
                    </MenuItem>
                    <MenuItem Header="_View">
                        <MenuItem Header="_Baby Paint" Command="{Binding BabyPaintViewCommand}" InputGestureText="F11" />
                        <MenuItem Header="_Preview Animation" Command="{Binding Editor.PreviewAnimationCommand}" />
                    </MenuItem>
                </Menu>
            </ToolBar>
            <ToolBar>
                <ToggleButton IsChecked="{Binding Editor.Mode, Converter={StaticResource EqualValuesConverter}, ConverterParameter={x:Static viewmodels:EditorModes.Draw}}">
                    <Image Source="Icons/Draw.png" Height="16" />
                </ToggleButton>
                <ToggleButton IsChecked="{Binding Editor.Mode, Converter={StaticResource EqualValuesConverter}, ConverterParameter={x:Static viewmodels:EditorModes.Select}}">
                    <Image Source="Icons/Select.png" Height="16" />
                </ToggleButton>
            </ToolBar>
            <ToolBar>
                <Label>Brush width:</Label>
                <xctk:DoubleUpDown Minimum="0" Value="{Binding Editor.CurrentStrokeThickness}" Width="50" Increment="1" />
                <Label Margin="15,0,0,0">Brush colour:</Label>
                <xctk:ColorPicker SelectedColor="{Binding Editor.CurrentStrokeColor}" />
            </ToolBar>
            <ToolBar>
                <Label>Background:</Label>
                <xctk:ColorPicker SelectedColor="{Binding Editor.Background, Converter={StaticResource ColorToSolidColorBackgroundConverter}}" />
            </ToolBar>
        </ToolBarTray>
        <Border Margin="5" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Viewbox>
                <Canvas x:Name="Canvas" Width="{Binding Editor.CanvasSize.Width}" Height="{Binding Editor.CanvasSize.Height}"
                        TouchDown="Canvas_TouchEvent" TouchMove="Canvas_TouchEvent" TouchUp="Canvas_TouchEvent"
                        MouseMove="Canvas_MouseMove" MouseLeftButtonDown="Canvas_MouseLeftButtonDown" MouseLeftButtonUp="Canvas_MouseLeftButtonUp"
                        Stylus.IsPressAndHoldEnabled="False" Stylus.IsTapFeedbackEnabled="False" Stylus.IsTouchFeedbackEnabled="False" Stylus.IsFlicksEnabled="False"
                        Background="White" />
            </Viewbox>
        </Border>
    </DockPanel>
</Window>
